// Inspired from http://stackoverflow.com/a/34648522/815737

apply plugin: 'maven-publish'
publishing {
    publications {
        aar(MavenPublication) {
            groupId POM_GROUP
            artifactId project.getName()
            version = POM_VERSION

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidJavadocsJar
            artifact androidSourcesJar

            pom.withXml {
                def repositoriesNode = asNode().appendNode('repositories')
                project.repositories.findAll { "maven".equals(it.name) }.eachWithIndex { repo, index ->
                    def repositoryNode = repositoriesNode.appendNode('repository')
                    repositoryNode.appendNode('id', "repo-${index}")
                    repositoryNode.appendNode('url', repo.url)
                }

                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.getByName("_releaseCompile").allDependencies.each {
                    if (it.group != null && it.name != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)

                        //If there are any exclusions in dependency
                        if (it.excludeRules.size() > 0) {
                            def exclusionsNode = dependencyNode.appendNode('exclusions')
                            it.excludeRules.each { rule ->
                                def exclusionNode = exclusionsNode.appendNode('exclusion')
                                if (rule.group != null) {
                                    exclusionNode.appendNode('groupId', rule.group)
                                }
                                if (rule.module != null) {
                                    exclusionNode.appendNode('artifactId', rule.module)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

apply plugin: 'com.jfrog.artifactory'
artifactory {
    contextUrl = 'http://repository.beapp.fr'
    publish {
        repository {
            repoKey = POM_VERSION.endsWith('SNAPSHOT') ? 'libs-snapshot-local' : 'libs-release-local'

            // Credentials have to be stored in a '~/.gradle/gradle.properties' file
            username = "${beapp_artifactory_user}"
            password = "${beapp_artifactory_password}"
        }
        defaults {
            publications('aar')
            publishArtifacts = true
            publishPom = true
        }
    }
}

task androidJavadocs(type: Javadoc) {
    options {
        linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"

    }
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}